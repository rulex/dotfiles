#!/bin/zsh
alias ..='cd ..'
alias ...='cd ../..'
alias -- -='cd -'

alias please='sudo'
alias rm='rm -I'

alias ls='ls -F --color=auto --time-style="+%Y-%m-%d %H:%M:%S" '
alias lsa='ls -lah'
alias l='ls -lah'
alias ll='ls -l'
alias la='ls -lA'
alias lc='ls -lthrc'
alias lca='ls -ltrca'
alias sl=ls
alias lt='tree'

#alias dt='date +"%Y-%m-%dT%H:%M:%S"'
function dt() {
    if [[ $# == 0 ]]; then
        # pretty print now
        date +"%Y-%m-%d %H:%M:%S"
    elif [[ $# == 1 ]]; then
        if [[ $1 == "-h" ]] || [[ $1 == "h" ]]; then
            echo "dt               date this!"
            echo ""
            echo " dt              print date (%Y-%m-%d %H:%M:%S)"
            echo " dt <u>          unix timestamp to date"
            echo " dt w            print date with week"
            echo " dt p <d1>       pretty print d1 since"
            echo " dt <d1> <d2>    print d1 & d2 diff"
        elif [[ $1 == "w" ]]; then
            # now + week
            date +"%Y-%m-%d %H:%M:%S W%V"
        else
            # pretty print input unix ts
            # TODO check if $1 is number aka it is unix timestamp OR...
            date +"%Y-%m-%d %H:%M:%S" --date @"$1"
        fi
    elif [[ $# == 2 ]] && [[ $1 == "p" ]]; then
        pretty_time "${2}"
    elif [[ $# == 2 ]]; then
        # diff between two dates
        date1=$(date -d "$1" +%s)
        date2=$(date -d "$2" +%s)
        pretty_time $((date2 - date1))
    fi
}

function cheat() {
    curl "cht.sh/${1}"
}

#function fx() {
    #firefox --new-instance --profile "$(mktemp -d /tmp/fx.XXX)"
#}

function fxn() {
    firefox-nightly --new-instance --profile "$(mktemp -d /tmp/fxn.XXX)"
}

function fxd() {
    firefox-developer-edition --new-instance --profile "$(mktemp -d /tmp/fxd.XXX)"
}

#function say() {
#    local IFS=+
#    mpv --volume 60 "http://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&q=$*&tl=en"
#}

function ds() {
    du --time --time-style="+%Y-%m-%d %H:%M:%S" -shc ${*:-*} | sort -k 1 -h
}

function json_escape() {
    printf '%s' "${1}" | python -c 'import json,sys; print(json.dumps(sys.stdin.read()))'
}

function e() {
    nvim ${*} || vim ${*} || vi ${*}
}

function :e() {
    e ${*}
}
function e-() {
    e -
}

function es() {
    if [ -f vimsession ]; then
        #find . -name '*vimsession'
        #read input_str
        e -S vimsession
    elif [ -f package.json ]; then
        e package.json
    else
        e
    fi
}

function wordcount() {
    local minwordlength=0
    local files=()
    while (($#>0)); do
        case $1 in
        -l|--minlength)
            shift
            minwordlength=${1}
            shift;;
        *)
            files+=(${1})
            shift;;
        esac
    done
    sed -e 's/[^[:alpha:]]/ /g' ${files[@]} \
        | tr '\n' " " \
        | tr -s " " \
        | tr " " '\n'\
        | tr 'A-Z' 'a-z' \
        | while read line ; do test ${#line} -ge ${minwordlength} && echo "${line}"; done \
        | sort \
        | uniq -c \
        | sort -nr \
        | nl
}

alias new_uuid='cat /dev/urandom | tr -dc "a-zA-Z0-9" | fold -w 32 | head -n 1'
random-string() {
    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1
}

function px() {
    if [[ $# == 0 ]]; then
        ps auxf
    elif [[ $# -ge 1 ]]; then
        ps auxf | grep -i "${*}"
    fi
}

function pwatch() {
    local re='^[0-9]+$'
    echo "${1}"
    if ! [[ ${1} =~ $re ]] ; then
        watch -g pgrep "${1}"
    else
        watch -g ps -opid -p "${1}"
    fi
}

alias f='find'
function fn() {
    if [[ $# -eq 0 ]]; then
        echo "fn <${C_YELLOW}Filename to search for${C_N}> [${C_DARKGRAY}limit search to Path${C_N}] [${C_DARKGRAY}find options${C_N}]"
        echo "  example: 'fn asdf /home -type f' would be 'find /home -iname '*asdf*' -type f'"
        return 1
    elif [[ $# -eq 1 ]]; then
        find ${2:-.} -iname "*${1}*"
    elif [[ $# -ge 2 ]]; then
        _file="${1}"
        shift
        _path="${1}"
        shift
        params=()
        local FZF=""
        local FZFW="up:50%"
        # handle non 'find' params?
        while (($#>0)); do
            case $1 in
                --F|--FZF)
                    shift
                    FZF="${1}"
                    shift;;
                --W|--FZFW)
                    shift
                    FZFW="${1}"
                    shift;;
                --f|--fzf)
                    FZF="file {}"
                    FZFW="down:1"
                    shift;;
                --h|--head)
                    FZF="file {} ; head {}"
                    shift;;
                --t|--tail)
                    FZF="tail {}"
                    shift;;
                *)
                    params+=(${1})
                    shift;;
            esac
        done
        _CMD="find ${_path:-.} -iname '*${_file:-.}*' ${params}"
        if [ "${FZF}" != "" ]; then
            eval ${_CMD} | fzf --bind \?:toggle-preview --preview "${FZF}" --preview-window "${FZFW}"
            return 0
        fi
        eval ${_CMD}
    fi
}

# zsh completions https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org
function _fn() {
    _arguments -C "1:filename to find:((f\:\ filename\ to\ find fi))" "2:second arg:_files" $args '*-iname:name pattern to match (case insensitive)' '(-L -P)-H[only follow symlinks when resolving command-line arguments]' '(-H -P)-L[follow symlinks]' '*-atime:access time (days):->times' '*-ctime:inode change time (days):->times' '*-depth' '*-exec:program: _command_names -e:*\;::program arguments: _normal' '*-follow' '*-fstype:file system type:_file_systems' '*-group:group:_groups' '*-inum:inode number:' '*-links:number of links:' '*-ls' '*-mtime:modification time (days):->times' '*-name:name pattern' '*-newer:file to compare (modification time):_files' '*-nogroup' '*-nouser' '*-ok:program: _command_names -e:*\;::program arguments: _normal' '*-perm: :_file_modes' '*-print' '*-prune' '*-size:file size (blocks)' '*-type:file type:((b\:block\ special\ file c\:character\ special\ file d\:directory p\:named\ pipe f\:normal\ file l\:symbolic\ link s\:socket))' '*-user:user:_users' '*-xdev' '*-a' '*-o' '(-D -E -H -L -O -P -f -s -x --help --version)*:directory:_files -/'
}
compdef _fn fn

alias grep='grep --color=auto'
alias rg='rg --no-ignore'
alias egrep='egrep --color=auto'
#alias -g align='sed -e "s#¤#|#" -e "s#:#¤#" | column -t -s "¤" -o " | "'
alias -g H='| head'
alias -g T='| tail'
#alias -g G='| rg'
alias -g R='| rg'
alias -g X='| xargs -n1 -d"\n"'
alias -g E='| nvim -'
alias -g CC='| ccze'
alias -g TS='| while IFS= read -r line; do printf "[%s] %s\n" "$(date "+%Y-%m-%d %H:%M:%S.%N")" "$line"; done'
alias -g TSC='| while IFS= read line; do echo -e "[${C_YELLOW}$(date "+%Y-%m-%d %H:%M:%S.%N")${C_N}] ${line}" ; done'

alias xterm='xterm -bg black -fg white'

alias p='pacman'
alias P='packer'
alias s='sudo '
alias w='w -f'
alias fig='docker-compose'
alias t='tmux'
alias tmuxeey='new -d -s "default" \
    new-window   \; \
    new-window   \; \
    new-window   \; \
    new-window   "htop" \; \
    split-window -h "nmon" \; \
    split-window -v "watch sensors" \; \
    select-pane -L \; \
    split-window -v "journalctl -alf" \; \
    attach \;'
alias tmuxmon='tmux \
    new-window   "htop" \; \
    split-window -h -p 35 "NMON=ld nmon" \; \
    split-window -v "watch -d sensors" \; \
    select-pane -L \; \
    split-window -v "journalctl -alf | ccze -m ansi" \;'

alias netlisteners='lsof -i -P | grep LISTEN'
alias g='git'
alias gs='git status'
alias ga='git add'
alias gb='git branch'
alias gba='git branch -av'
alias gc='git commit'
alias gcv='git commit --verbose'
alias gd='git diff'
alias gco='git checkout'
alias gm='git merge'
alias gl="git log --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen[%ci (%cr)] %C(bold blue)<%an>%Creset' --abbrev-commit"
#alias glh="git log --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit|head"
alias gls="git log --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' --abbrev-commit"
alias glg="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen[%ci (%cr)] %C(bold blue)<%an>%Creset' --abbrev-commit"
alias glga="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen[%ci (%cr)] %C(bold blue)<%an>%Creset' --abbrev-commit --all"
alias gln='git log --color --pretty=format:"%C(red)%h%C(reset) - %s %C(green)[%ci (%cr)] %C(bold blue)<%an>%C(reset)" --name-only'
#alias gls='git show --color --pretty=format:"%C(red)%h%C(reset) - %s %C(green)[%ci (%cr)] %C(bold blue)<%an>%C(reset)"'
alias glc='git shortlog --color --no-merges -nes'
alias grup='git remote update'
alias gwc='git whatchanged -p --abbrev-commit --pretty=medium'

alias mysql='mysql --auto-rehash'
alias cv='progress'
alias ccze='ccze -m ansi'

function glh() {
    GIT_PAGER="less -S" \
        git log \
        --color \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit ${1} \
        | sed "s|\(tag: [A-z0-9]\+\)\([, ]\+tag: [A-z0-9]\+,\)||g ; s|[, ]\+| |g" \
        | head ${2}
}

function logstr() {
    # replace newline with newline+tab for extra fancy indented text
    logstr=$( echo "${1//
/
    }" )
    echo "$(dt) ${logstr}" >> ~/.a.log
}

function A() {
    ( led & ) # led notification
    local PUSHOVER=0
    if [ $# -eq 0 ];then
        txt="Done"
    elif [ $# -gt 1 ] && ( [[ "$1" == "p" ]] || [[ "$1" == "P" ]] );then
        txt="${@:2}"
        PUSHOVER=1
    else
        txt="$*"
    fi
    # log errything to file
    logstr ${txt}
    if dbus-send --session --dest=org.freedesktop.DBus --type=method_call --print-reply /org/freedesktop/DBus org.freedesktop.DBus.ListNames | grep -q org.freedesktop.Notifications;then
        notify-send -t 10000 -a A-Notice ${txt}
    else
        echo "  ${C_YELLOW}A(): ${C_RED}no org.freedesktop.DBus"
    fi
    # tmux display-message
    # TODO some tmux check if we are @localhost or remote
    #tmux_txt=$(echo ${txt} | tr '\n' ' ' | sed "s| \+| |g")
    #tmux display-message "A(): ${tmux_txt}"
    # if we want pushover
    if [ ${PUSHOVER} -eq 1 ];then
        local _config=~/.pushover.sh
        # check if config exists
        if [ ! -f ${_config} ]; then
            echo "  ${C_YELLOW}A(): ${C_RED}Config file ${_config} does not exist."
            return 1
        fi
        # source config
        source ${_config}
        # check if vars are present
        #if (( ! ${+pushover_userkey} )) || (( ! ${+pushover_apitoken} )); then
        if [[ -v pushover_userkey && -v pushover_apitoken ]]; then
            true
        else
            echo "  ${C_YELLOW}A(): ${C_N}pushover_userkey or pushover_apitoken is not set"
            return 2
        fi
        if [[ "$1" == "P" ]];then
            local notify_timeout=10
            # clear the cmd
            zsh_notifier_cmd=
            echo "  ${C_YELLOW}A(): ${C_RED}Ctrl+C${C_N} to cancel, Enter to continue or wait ${notify_timeout}s"
            read -t ${notify_timeout} input_str
        fi
        # make post data and post to pushover
        ts=$(date +%s)
        txt="$(urlencode "${txt}")"
        post_data="token=${pushover_apitoken}&user=${pushover_userkey}&message=${txt}&timestamp=${ts}&html=1"
        # TODO post to kodi?
        #echo "${txt}"
        #echo "${post_data}"
        local response=$(curl -s https://api.pushover.net/1/messages.json -d "${post_data}")
        # TODO parse json response?
        if [ $? -eq 0 ]; then
            return 0
        else
            echo "  ${C_YELLOW}A(): ${C_RED}Failed to deliver message to pushover.net"
            return 3
        fi
    fi
}

function current_monitor() {
    i3-msg -t get_workspaces | jq ".[] | .focused , .output" | paste - - | rg ^true | awk '{print $2}' | sed 's/"//g'
}

function pushover-img() {
    img_path="${1}"
    txt=${*}
    ts=$(date +%s)
    txt="$(urlencode "${txt}")"
    post_data="token=${pushover_apitoken}&user=${pushover_userkey}&message=${txt}&timestamp=${ts}&html=1"
    local response=$(curl -s https://api.pushover.net/1/messages.json -d "${post_data}")
    local response=$(curl -s \
        --form-string "token=${pushover_apitoken}" \
        --form-string "user=${pushover_userkey}" \
        --form-string "message=${txt}" \
        -F "attachment=@${img_path}" \
        https://api.pushover.net/1/messages.json
            )
    # TODO parse json response?
    if [ $? -eq 0 ]; then
        return 0
    else
        echo "  A(): Failed to deliver message to pushover.net"
        return 3
    fi
}

function ht() {
    # TODO ...
    match="${1:-TODO}"
    lines="$(rg -N --colors "match:fg:cyan" "${match}" ~/Sync/h.txt)"
    echo "${lines}" | rg --colors "match:fg:cyan" "${match}"
    echo
    echo "Total lines: $(echo ${lines} | wc -l)"
}

function AA() {
    if [ $# -eq 0 ];then
        txt="Done"
    else
        txt="$*"
    fi
    A p ${txt}
}

function pretty_time() {
    if (( $# == 0 )); then
        echo "${C_RED}pretty_time${C_N} <seconds>"
        return 1
    fi
    local human total_seconds=$(echo $1 | cut -d. -f1)
    local days=$(( total_seconds / 60 / 60 / 24 ))
    local hours=$(( total_seconds / 60 / 60 % 24 ))
    local minutes=$(( total_seconds / 60 % 60 ))
    local seconds=$(printf "%.*f\n" 2 $(( $1 % 60 )) )
    (( days > 0 )) && human+="${days}d "
    (( hours > 0 )) && human+="${hours}h "
    (( minutes > 0 )) && human+="${minutes}m "
    human+="${seconds}s"
    echo "$human"
    return
}

function pretty_size() {
    if [[ $# == 2 ]] && [[ $1 == "i" ]]; then
        echo $2 | numfmt --to=iec-i
    elif [[ $# == 1 ]]; then
        echo $1 | numfmt --to=iec
    elif [[ $# == 0 ]]; then
        numfmt --to=iec
    fi
}

function calc() {
    str="$*"
    result=$( echo "${str}" | bc -l )
    echo -e "${str} ${C_CYAN}= ${result}"
}

function pushover() {
    A p $*
}

notify-preexec-hook() {
    zsh_notifier_last_time="${zsh_notifier_time}"
    zsh_notifier_cmd="$1"
    zsh_notifier_time="$(date +%s.%N)"
}

notify-precmd-hook() {
    local returncode=$?
    local time_taken
    if [[ "${zsh_notifier_cmd}" != "" ]]; then
        time_taken=$(( `date +%s.%N` - ${zsh_notifier_time} ))
        local str="cmd:   ${zsh_notifier_cmd}
code:  ${returncode}
dir:   ${PWD}
start: $(date -d @${zsh_notifier_time} +"%Y-%m-%d %H:%M:%S")
time:  $( pretty_time ${time_taken} )
end:   $( date +"%Y-%m-%d %H:%M:%S" )
tty:   ${TTY}"
        if (( ${time_taken} > ${REPORTTIME_AA} )); then
            str="${USER}@${HOST}
${str}"
            A P ${str}
        elif (( ${time_taken} > ${REPORTTIME_A} )); then
            A ${str}
        fi
    fi
    zsh_notifier_cmd=
}

strlen () {
    FOO=$1
    local zero='%([BSUbfksu]|([FB]|){*})'
    LEN=${#${(S%%)FOO//$~zero/}}
    echo $LEN
}

# show right prompt with date ONLY when command is executed
timestamp-preexec () {
    DATE=$( date +"[%H:%M:%S]" )
    local len_right=$( strlen "${DATE}" )
    len_right=$(( ${len_right}+1 ))
    local right_start=$((${COLUMNS} - ${len_right}))
    local len_cmd=$( strlen "$@" )
    local len_prompt=$(strlen "${PROMPT}" )
    local len_left=$((${len_cmd}+${len_prompt}))
    RDATE="\033[${right_start}C ${DATE}"
    if [ ${len_left} -lt ${right_start} ]; then
        # command does not overwrite right prompt
        # ok to move up one line
        echo -e "\033[1A${RDATE}"
    else
        echo -e "${RDATE}"
    fi
}

[[ -z ${preexec_functions} ]] && preexec_functions=()
preexec_functions=( ${preexec_functions} notify-preexec-hook )

[[ -z ${precmd_functions} ]] && precmd_functions=()
precmd_functions=( ${precmd_functions} notify-precmd-hook )
